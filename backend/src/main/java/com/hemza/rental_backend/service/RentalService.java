package com.hemza.rental_backend.service;

import com.hemza.rental_backend.dto.RentalRequestDTO;
import com.hemza.rental_backend.model.Rental;
import com.hemza.rental_backend.model.User;
import com.hemza.rental_backend.repository.RentalRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class RentalService {

  @Autowired
  private RentalRepository rentalRepository;

  @Autowired
  private UserService userService;

  /**
   * Cr√©e une nouvelle location √† partir des donn√©es du formulaire (DTO).
   * Cette location est automatiquement li√©e √† l'utilisateur actuellement
   * authentifi√©.
   *
   * @param dto Donn√©es du formulaire envoy√© par le frontend
   * @return Rental persist√© en base
   */
  public Rental createRental(RentalRequestDTO dto) {
    // üîê R√©cup√©ration de l'utilisateur actuellement connect√©
    User currentUser = userService.getCurrentUser();

    // üè† Cr√©ation de l'objet Rental √† persister
    Rental rental = new Rental();
    rental.setName(dto.getName());
    rental.setSurface(dto.getSurface());
    rental.setPrice(dto.getPrice());
    rental.setDescription(dto.getDescription());
    rental.setOwner(currentUser); // üîó Association au user connect√©
    rental.setCreatedAt(LocalDateTime.now());
    rental.setUpdatedAt(LocalDateTime.now());

    // üñºÔ∏è Gestion de l'upload d'image si pr√©sente
    MultipartFile pictureFile = dto.getPicture();
    if (pictureFile != null && !pictureFile.isEmpty()) {
      try {
        String uploadDir = "uploads"; // üìÇ Dossier racine du projet
        Path uploadPath = Paths.get(uploadDir);

        // Cr√©ation du dossier s‚Äôil n‚Äôexiste pas
        if (!Files.exists(uploadPath)) {
          Files.createDirectories(uploadPath);
        }

        // üßæ Nom de fichier unique
        String fileName = System.currentTimeMillis() + "_" + pictureFile.getOriginalFilename();
        Path filePath = uploadPath.resolve(fileName);

        // üì• Sauvegarde du fichier
        Files.write(filePath, pictureFile.getBytes());

        // üìå Enregistrement du chemin dans la base
        rental.setPicture("http://localhost:8080/uploads/" + fileName);

      } catch (IOException e) {
        throw new RuntimeException("Erreur lors de l'enregistrement de l'image", e);
      }
    }

    // üíæ Sauvegarde en base de donn√©es
    return rentalRepository.save(rental);
  }

  /**
   * R√©cup√®re toutes les locations disponibles.
   *
   * @return Liste compl√®te des rentals
   */
  public List<Rental> getAllRentals() {
    List<Rental> rentals = rentalRepository.findAll();



    return rentals;
  }

  public Optional<Rental> getRentalById(Long id) {
    return rentalRepository.findById(id);
}

}
